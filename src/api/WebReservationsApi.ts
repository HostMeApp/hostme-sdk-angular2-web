/**
 * Qa web api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: web
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class WebReservationsApi {
    protected basePath = 'http://hostme-services-qa.azurewebsites.net';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param value 
     */
    public addNewReservation(restaurantId: number, value: models.CreateWebReservation, extraHttpRequestParams?: any): Observable<models.Reservation> {
        return this.addNewReservationWithHttpInfo(restaurantId, value, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param lat 
     * @param lon 
     * @param name 
     */
    public findRestaurants(lat?: number, lon?: number, name?: string, extraHttpRequestParams?: any): Observable<Array<models.RestaurantInfo>> {
        return this.findRestaurantsWithHttpInfo(lat, lon, name, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param date 
     * @param partySize 
     * @param rangeInMinutes 
     * @param areas 
     */
    public getReservationAvailability(restaurantId: number, date: Date, partySize: number, rangeInMinutes: number, areas?: string, extraHttpRequestParams?: any): Observable<Array<models.OnlineAvailability>> {
        return this.getReservationAvailabilityWithHttpInfo(restaurantId, date, partySize, rangeInMinutes, areas, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getRestaurantById(restaurantId: number, extraHttpRequestParams?: any): Observable<models.RestaurantInfo> {
        return this.getRestaurantByIdWithHttpInfo(restaurantId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * 
     * @param restaurantId 
     * @param value 
     */
    public addNewReservationWithHttpInfo(restaurantId: number, value: models.CreateWebReservation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/web/restaurants/${restaurantId}/reservations`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling addNewReservation.');
        }
        // verify required parameter 'value' is not null or undefined
        if (value === null || value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling addNewReservation.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml', 
            'application/x-www-form-urlencoded', 
            'image/jpg', 
            'image/jpeg', 
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: value == null ? '' : JSON.stringify(value), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param lat 
     * @param lon 
     * @param name 
     */
    public findRestaurantsWithHttpInfo(lat?: number, lon?: number, name?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/web/restaurants/find`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (lat !== undefined) {
            queryParameters.set('lat', <any>lat);
        }
        if (lon !== undefined) {
            queryParameters.set('lon', <any>lon);
        }
        if (name !== undefined) {
            queryParameters.set('name', <any>name);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param date 
     * @param partySize 
     * @param rangeInMinutes 
     * @param areas 
     */
    public getReservationAvailabilityWithHttpInfo(restaurantId: number, date: Date, partySize: number, rangeInMinutes: number, areas?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/web/restaurants/${restaurantId}/availability`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getReservationAvailability.');
        }
        // verify required parameter 'date' is not null or undefined
        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling getReservationAvailability.');
        }
        // verify required parameter 'partySize' is not null or undefined
        if (partySize === null || partySize === undefined) {
            throw new Error('Required parameter partySize was null or undefined when calling getReservationAvailability.');
        }
        // verify required parameter 'rangeInMinutes' is not null or undefined
        if (rangeInMinutes === null || rangeInMinutes === undefined) {
            throw new Error('Required parameter rangeInMinutes was null or undefined when calling getReservationAvailability.');
        }
        if (date !== undefined) {
            queryParameters.set('date', <any>date);
        }
        if (partySize !== undefined) {
            queryParameters.set('partySize', <any>partySize);
        }
        if (rangeInMinutes !== undefined) {
            queryParameters.set('rangeInMinutes', <any>rangeInMinutes);
        }
        if (areas !== undefined) {
            queryParameters.set('areas', <any>areas);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getRestaurantByIdWithHttpInfo(restaurantId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/web/restaurants/${restaurantId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getRestaurantById.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

}
